diff --git a/src/modules/htable/ht_api.c b/src/modules/htable/ht_api.c
index 913d038748..2391cb5c5d 100644
--- a/src/modules/htable/ht_api.c
+++ b/src/modules/htable/ht_api.c
@@ -255,7 +255,7 @@ ht_t *ht_get_table(str *name)

 int ht_add_table(str *name, int autoexp, str *dbtable, str *dbcols, int size,
 		int dbmode, int itype, int_str *ival, int updateexpire,
-		int dmqreplicate)
+		int dmqreplicate, char coldelim, char colnull)
 {
 	unsigned int htid;
 	ht_t *ht;
@@ -342,8 +342,8 @@ int ht_add_table(str *name, int autoexp, str *dbtable, str *dbcols, int size,
 		}
 		ht->ncols = c + 1;
 		ht->pack[0] = 'l';
-		ht->pack[1] = ',';
-		ht->pack[2] = '*';
+		ht->pack[1] = coldelim;
+		ht->pack[2] = colnull;
 	}

 	ht->next = _ht_root;
@@ -957,6 +958,8 @@ int ht_table_spec(char *spec)
 	unsigned int dbmode = 0;
 	unsigned int updateexpire = 1;
 	unsigned int dmqreplicate = 0;
+	char coldelim = ',';
+	char colnull = '*';
 	str in;
 	str tok;
 	param_t *pit = NULL;
@@ -1023,13 +1026,34 @@ int ht_table_spec(char *spec)

 			LM_DBG("htable [%.*s] - dmqreplicate [%u]\n", name.len, name.s,
 					dmqreplicate);
+		} else if(pit->name.len == 8
+				  && strncmp(pit->name.s, "coldelim", 8) == 0) {
+			if(tok.len > 1)
+				goto error;
+
+			coldelim = tok.s[0];
+			LM_DBG("htable [%.*s] - coldelim [%c]\n", name.len, name.s,
+				   coldelim);
+		} else if(pit->name.len == 7
+				  && strncmp(pit->name.s, "colnull", 7) == 0) {
+			if(tok.len > 1)
+				goto error;
+
+			if(tok.len == 0) {
+				colnull = '\0';
+			} else {
+				colnull = tok.s[0];
+			}
+
+			LM_DBG("htable [%.*s] - colnull [%c]\n", name.len, name.s,
+			   		colnull);
 		} else {
 			goto error;
 		}
 	}

 	return ht_add_table(&name, autoexpire, &dbtable, &dbcols, size, dbmode,
-			itype, &ival, updateexpire, dmqreplicate);
+			itype, &ival, updateexpire, dmqreplicate, coldelim, colnull);

 error:
 	LM_ERR("invalid htable parameter [%.*s]\n", in.len, in.s);
diff --git a/src/modules/htable/ht_api.h b/src/modules/htable/ht_api.h
index d8bdc2aab2..e24a93b1f1 100644
--- a/src/modules/htable/ht_api.h
+++ b/src/modules/htable/ht_api.h
@@ -88,7 +88,7 @@ typedef struct _ht_pv

 int ht_add_table(str *name, int autoexp, str *dbtable, str *dbcols, int size,
 		int dbmode, int itype, int_str *ival, int updateexpire,
-		int dmqreplicate);
+		int dmqreplicate, char coldelim, char colnull);
 int ht_init_tables(void);
 int ht_destroy(void);
 int ht_set_cell(ht_t *ht, str *name, int type, int_str *val, int mode);
diff --git a/src/modules/htable/ht_db.c b/src/modules/htable/ht_db.c
index 631788b1a5..7a22ff6c48 100644
--- a/src/modules/htable/ht_db.c
+++ b/src/modules/htable/ht_db.c
@@ -121,7 +121,9 @@ static int ht_pack_values(
 	len = 0;
 	for(c = 1; c < cols; c++) {
 		if(VAL_NULL(&RES_ROWS(db_res)[row].values[c])) {
-			len += 1;
+			if(ht->pack[2] != '\0') {
+				len += 1;
+			}
 		} else if(RES_ROWS(db_res)[row].values[c].type == DB1_STRING) {
 			len += strlen(RES_ROWS(db_res)[row].values[c].val.string_val);
 		} else if(RES_ROWS(db_res)[row].values[c].type == DB1_STR) {
@@ -143,8 +145,10 @@ static int ht_pack_values(
 	p = vbuf;
 	for(c = 1; c < cols; c++) {
 		if(VAL_NULL(&RES_ROWS(db_res)[row].values[c])) {
-			*p = ht->pack[2];
-			p++;
+			if(ht->pack[2] != '\0') {
+				*p = ht->pack[2];
+				p++;
+			}
 		} else if(RES_ROWS(db_res)[row].values[c].type == DB1_STRING) {
 			strcpy(p, RES_ROWS(db_res)[row].values[c].val.string_val);
 			p += strlen(RES_ROWS(db_res)[row].values[c].val.string_val);
